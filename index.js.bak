const { resolve } = require('path')

const HEADER_CONTENT_ENCODING = 'content-encoding',
  HEADER_CONTENT_TYPE = 'content-type',
  CONTENT_ENCODING_CHUNKED = 'chunked'

function log(...msg) {
  queueMicrotask(() => console.log(msg))
}

function decodeURLEncodedForm(reqBodyBuf) {
  log('decodeURLEncodedForm:', reqBodyBuf.toString(), this.name)
  return new Promise((resolve, reject) => {
    const str = reqBodyBuf.toString('UTF-8'),
    params = str.split('&'),
    reqBody = {
      type: 'form',
      fields: {}
    }

    let separatorIndex
    for(const param of params) {
      separatorIndex = param.indexOf('=')
      if (separatorIndex === -1) {
        log(`Invalid content ${str}`)
        reject({
          code: 400
        })

        return
      }
      
      reqBody.fields[param.slice(0, separatorIndex)] = param.slice(separatorIndex + 1)
    }

    resolve(reqBody)
  })
}

const decompressors = {
  'gzip': reqBodyBuf => reqBodyBuf
}

const decoders = {
  'application/x-www-form-urlencoded': {
    name: 'form-urlencoded',
    decode: decodeURLEncodedForm 
  }
}

const handlers = {
  'GET': {
    '/': {
      name: 'IndexHandler',
      handle: (reqMethod, reqURL, reqHeaders, reqBody) => {
        const headers = {}
        headers['Content-Type'] = 'text/html; charset=utf-8'

        return {
          code: 200,
          headers: headers,
          body: sampleHTML
        }
      }
    }
  },
  'POST': {
    '/book': {
      name: 'BookHandler',
      handle: (reqMethod, reqURL, reqHeaders, reqBody) => {
        const headers = {}
        headers['Content-Type'] = 'text/html; charset=utf-8'

        return {
          code: 200,
          headers: headers,
          body: resultHTML
        }
      }
    }
  }
}

function decompressReqBody(contentEncoding, contentType, reqBodyBuf) {
  if (!contentEncoding || contentEncoding === CONTENT_ENCODING_CHUNKED)
    return decodeReqBody(contentType, reqBodyBuf)
    
  const decompressor = decompressors[contentEncoding]
  if (!decompressor)
    return new Promise((resolve, reject) =>
      reject({ code: 400, desc: `decompressReqBody: unsupported content encoding ${contentEncoding}` })
    )

  decompressor.unzip(reqBodyBuf)
    .then(decompressedReqBodyBuf => decodeReqBody(contentType, decompressedReqBodyBuf), errResp => errResp)
    .then(reqBody => new Promise(resolve => resolve(reqBody)), errResp => reject(errResp))
}

function decodeReqBody(contentType, reqBodyBuf) {
  return new Promise((resolve, reject) => {
    const decoder = decoders[contentType]
    if (!decoder) {
      reject({ code: 400, desc: `decodeReqBody: Unsupported content type ${contentType}` })
      return
    }

    decoder.decode(reqBodyBuf)
      .then(reqBody => resolve(reqBody), errResp => reject(errResp))
  })
}

const sampleHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Login</title>
</head>
<body>
<form method="POST" action="book">
  <input name="username" placeholder="Username"><br>
  <input type="submit" value="Submit">
</form>
</body>
</html>
`,
resultHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Login</title>
</head>
<body>
<div>OK</div>
</body>
</html>
`

function handle(reqMethod, reqURL, reqHeaders, reqBody) {
  return new Promise(resolve => {
    const methodRouter = handlers[reqMethod]
    if (!methodRouter)
      return resolve({ code : 400, desc: `handle: no handler for ${reqMethod} ${reqURL.pathname}` })

    const handler = methodRouter[reqURL.pathname]
    if (!handler)
      return resolve({ code : 400, desc: `handle: no handler for ${reqMethod} ${reqURL.pathname}` })

    resolve(handler.handle(reqMethod, reqURL, reqHeaders, reqBody))
  })
}

function handleError(error) {
  return new Promise(resolve => {
    log('handleError:', error)
    resolve({ code: 400 })
  })
}

function writeResponse(httpResp, resp) {
  httpResp.writeHead(resp.code, resp.headers)
    .end(resp.body)
}

function writeSystemError(httpResp, err) {
  httpResp.statusCode = 500
  httpResp.end()

  if (err)
    log('writeSystemError:', err.message)
}

function startServer(serverPort, handler) {
  const baseURL = `http://localhost:${serverPort}`

  require('http').createServer((httpReq, httpResp) => {
    const url = new URL(httpReq.url, baseURL)
    const reqDataParts = []
    let reqBodyBufSize = 0
    if (httpReq.method === 'GET') {
      handle(httpReq.method, url, httpReq.headers)
      .then(resp => writeResponse(httpResp, resp))
      .catch(err => writeSystemError(httpResp, err))

      return
    }

    httpReq.on('data', chunk => {
      reqBodyBufSize += chunk.length
      reqDataParts.push(chunk)
    }).on('end', () => {
      if (!httpReq.complete) {
        log('onRequestEnd: Client disconnected')
        return
      }

      decompressReqBody(httpReq.headers[HEADER_CONTENT_ENCODING],
        httpReq.headers[HEADER_CONTENT_TYPE],
        Buffer.concat(reqDataParts, reqBodyBufSize))
        .then(reqBody => handle(httpReq.method, url, httpReq.headers, reqBody), err => handleError(err))
        .then(resp => writeResponse(httpResp, resp))
        .catch(err => writeSystemError(httpResp, err))  
    })
      
  }).listen(serverPort, () => log(`Started server at port ${serverPort}`))
}

module.exports = { 
  startServer
}

startServer(1211)